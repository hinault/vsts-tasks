import tl = require('vsts-task-lib/task');

/**
 * Data class representing the report-task.txt file contents. Should be treated as read-only.
 */
export class SonarQubeRunSettings {

    /**
     * Construct a new SonarQubeRunSettings instance.
     * @param projectKey   A string uniquely identifying the project on the SonarQube server
     * @param serverUrl    A URI for a local or remote SonarQube server
     * @param dashboardUrl A URI to the dashboard where the analysis of this project can be found
     * @param ceTaskId     A string uniquely identifying this analysis task of the project
     * @param ceTaskUrl    A string leading to the SonarQube Web API endpoint for the details of this analysis task
     */
    constructor(public projectKey: string,
                public serverUrl: string,
                public dashboardUrl: string,
                public ceTaskId: string,
                public ceTaskUrl: string) {
        if (!projectKey) {
            // Looks like: Failed to create TaskReport object. Missing field: projectKey
            throw new Error(tl.loc('sqCommon_CreateTaskReport_MissingField', 'projectKey'));
        }
        if (!serverUrl) {
            // Looks like: Failed to create TaskReport object. Missing field: serverUrl
            throw new Error(tl.loc('sqCommon_CreateTaskReport_MissingField', 'serverUrl'));
        }
        if (!dashboardUrl) {
            // Looks like: Failed to create TaskReport object. Missing field: dashboardUrl
            throw new Error(tl.loc('sqCommon_CreateTaskReport_MissingField', 'dashboardUrl'));
        }
        if (!ceTaskId) {
            // Looks like: Failed to create TaskReport object. Missing field: ceTaskId
            throw new Error(tl.loc('sqCommon_CreateTaskReport_MissingField', 'ceTaskId'));
        }
        if (!ceTaskUrl) {
            // Looks like: Failed to create TaskReport object. Missing field: ceTaskUrl
            throw new Error(tl.loc('sqCommon_CreateTaskReport_MissingField', 'ceTaskUrl'));
        }
    }

    /**
     * Create a new SonarQubeRunSettings instance from the map representation of the report-task.txt file.
     * @param taskReportMap A map representation of the report-task.txt file generated by a SonarQube build plugin
     * @returns {SonarQubeRunSettings} A new SonarQubeRunSettings with appropriate fields filled
     */
    public static createTaskReportFromMap(taskReportMap: Map<string, string>): SonarQubeRunSettings {
        return new SonarQubeRunSettings(taskReportMap.get('projectKey'),
                taskReportMap.get('serverUrl'),
                taskReportMap.get('dashboardUrl'),
                taskReportMap.get('ceTaskId'),
                taskReportMap.get('ceTaskUrl')
        );
    }
}
